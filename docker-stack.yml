version: "3.8"

# ---------- Extensions (YAML anchors) ----------
x-eureka-env: &eureka_env
  - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://microservices_eureka-service:8761/eureka
  - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
  - EUREKA_CLIENT_FETCH_REGISTRY=true
  - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true

# ---------- Volumes ----------
volumes:
  prometheus_data:
  grafana_data:

# ---------- Configs ----------
configs:
  prometheus.yml:
    file: ./prometheus.yml

# ---------- Networks ----------
networks:
  microservice-net:
    driver: overlay
    attachable: true

# ---------- Services ----------
services:
  eureka-service:
    image: houssemsouid/eureka-service:latest
    ports:
      - "8761:8761"
    networks:
      microservice-net:
        aliases: [eureka-service]
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    deploy:
      resources:
        limits: { cpus: "0.50", memory: 512M }
        reservations: { cpus: "0.10", memory: 128M }
      update_config: { parallelism: 1, delay: 10s, failure_action: rollback }
      restart_policy: { condition: any, max_attempts: 3 }
      placement:
        constraints: [ "node.role == worker" ]
        preferences: [ { spread: "node.id" } ]

  gateway:
    image: houssemsouid/gateway:latest
    ports:
      - "8888:8888"
    networks: [microservice-net]
    depends_on: [eureka-service]
    environment: *eureka_env
    deploy:
      resources:
        limits: { cpus: "0.50", memory: 512M }
        reservations: { cpus: "0.10", memory: 128M }
      update_config: { parallelism: 1, delay: 10s, failure_action: rollback }
      restart_policy: { condition: any, max_attempts: 3 }
      placement:
        constraints: [ "node.role == worker" ]
        preferences: [ { spread: "node.id" } ]

  product-service:
    image: houssemsouid/product-service:latest
    networks: [microservice-net]
    depends_on: [eureka-service]
    environment: *eureka_env
    deploy:
      resources:
        limits: { cpus: "0.50", memory: 512M }
        reservations: { cpus: "0.10", memory: 128M }
      update_config: { parallelism: 1, delay: 10s, failure_action: rollback }
      restart_policy: { condition: any, max_attempts: 3 }
      placement:
        constraints: [ "node.role == worker" ]
        preferences: [ { spread: "node.id" } ]

  billing-service:
    image: houssemsouid/billing-service:latest
    networks: [microservice-net]
    depends_on: [eureka-service]
    environment: *eureka_env
    deploy:
      resources:
        limits: { cpus: "0.50", memory: 512M }
        reservations: { cpus: "0.10", memory: 128M }
      update_config: { parallelism: 1, delay: 10s, failure_action: rollback }
      restart_policy: { condition: any, max_attempts: 3 }
      placement:
        constraints: [ "node.role == worker" ]
        preferences: [ { spread: "node.id" } ]

  billing-producer:
    image: houssemsouid/billing-producer:latest
    networks: [microservice-net]
    depends_on: [eureka-service]
    environment: *eureka_env
    deploy:
      resources:
        limits: { cpus: "0.50", memory: 512M }
        reservations: { cpus: "0.10", memory: 128M }
      update_config: { parallelism: 1, delay: 10s, failure_action: rollback }
      restart_policy: { condition: any, max_attempts: 3 }
      placement:
        constraints: [ "node.role == worker" ]
        preferences: [ { spread: "node.id" } ]

    analyse-service:
    image: houssemsouid/analyse-service:latest
    networks:
      - microservice-net
    depends_on:
      - eureka-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://microservices_eureka-service:8761/eureka
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.10"
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: any
        max_attempts: 3
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.id


  custmer-service:
    image: houssemsouid/custmer-service:latest
    networks: [microservice-net]
    depends_on: [eureka-service]
    environment: *eureka_env
    deploy:
      resources:
        limits: { cpus: "0.50", memory: 512M }
        reservations: { cpus: "0.10", memory: 128M }
      update_config: { parallelism: 1, delay: 10s, failure_action: rollback }
      restart_policy: { condition: any, max_attempts: 3 }
      placement:
        constraints: [ "node.role == worker" ]
        preferences: [ { spread: "node.id" } ]

  frontend:
    image: houssemsouid/frontend:latest
    ports:
      - "4200:80"
    networks: [microservice-net]
    depends_on: [gateway]
    deploy:
      resources:
        limits: { cpus: "0.50", memory: 256M }
        reservations: { cpus: "0.05", memory: 128M }
      update_config: { parallelism: 1, delay: 10s, failure_action: rollback }
      restart_policy: { condition: any, max_attempts: 3 }
      placement:
        constraints: [ "node.role == worker" ]
        preferences: [ { spread: "node.id" } ]

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks: [microservice-net]
    configs:
      - source: prometheus.yml
        target: /etc/prometheus/prometheus.yml
    volumes:
      - prometheus_data:/prometheus
    deploy:
      resources:
        limits: { cpus: "0.50", memory: 512M }
        reservations: { cpus: "0.10", memory: 128M }
      update_config: { parallelism: 1, delay: 10s, failure_action: rollback }
      restart_policy: { condition: any, max_attempts: 3 }
      placement:
        constraints: [ "node.role == worker" ]
        preferences: [ { spread: "node.id" } ]

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks: [microservice-net]
    depends_on: [prometheus]
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      resources:
        limits: { cpus: "0.50", memory: 512M }
        reservations: { cpus: "0.10", memory: 128M }
      update_config: { parallelism: 1, delay: 10s, failure_action: rollback }
      restart_policy: { condition: any, max_attempts: 3 }
      placement:
        constraints: [ "node.role == worker" ]
        preferences: [ { spread: "node.id" } ]
